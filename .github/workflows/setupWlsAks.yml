name: Setup WLS on AKS

on:
  workflow_dispatch:
    inputs:
      disambiguationSuffix:
        description: 'Included in names to disambiguate. Get from another pipeline execution'
        required: true
      storageAccountName:
        description: 'Specify storage account of uploading .war file'
        required: true
      storageContainerName:
        description: 'Specify name of storage container within account'
        required: true
      dbName:
        description: 'Name of the database. Get from another pipeline run'
        required: true
  repository_dispatch:

env:
    refJavaee: bce4e6ec57726d4bc7992b45e1ff6e459b02fb39
    azCliVersion: 2.23.0
    azureCredentials: ${{ secrets.AZURE_CREDENTIALS }}
    location: eastus
    resourceGroupForWlsAks: wlsd-aks-${{ github.event.inputs.disambiguationSuffix }}-${{ github.run_number }}
    dbAdminUser: weblogic
    dbPassword: ${{ secrets.DB_PASSWORD }}
    dbName: ${{ github.event.inputs.dbName }}
    servicePrincipal: ${{ secrets.SERVICE_PRINCIPAL }}
    ocrSSOPSW: ${{ secrets.ORC_SSOPSW }}
    ocrSSOUser: ${{ secrets.ORC_SSOUSER }}
    wdtRuntimePassword: ${{ secrets.WDT_RUNTIMEPSW}}
    wlsUserName: ${{ secrets.WLS_USERNAME }}
    wlsPassword: ${{ secrets.WLS_PSW }}
    userAssignedManagedIdentity: ${{ secrets.USER_ASSIGNED_MANAGED_IDENTITY_ID }}
    aksRepoUserName: ${{ secrets.AKS_REPO_USER_NAME }}
    aksRepoBranchName: ${{ secrets.AKS_REPO_BRANCH_NAME }}
    aksClusterConfigMapName: wlsd-wdt-config-map-${{ github.event.inputs.disambiguationSuffix }}

jobs:
    preflight:
        runs-on: ubuntu-latest
        steps:
            - name: Set up JDK 1.8
              uses: actions/setup-java@v1
              with:
                java-version: 1.8
            - name: Set up bicep
              run: |
                curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
                chmod +x ./bicep
                sudo mv ./bicep /usr/local/bin/bicep
                bicep --version
            - name: Checkout azure-javaee-iaas
              uses: actions/checkout@v2
              with:
                repository: Azure/azure-javaee-iaas
                path: azure-javaee-iaas
                ref: ${{ env.refJavaee }}
            - name: Build azure-javaee-iaas
              run: mvn -DskipTests clean install --file azure-javaee-iaas/pom.xml
            - name: Checkout galiacheng/arm-oraclelinux-wls-aks
              uses: actions/checkout@v2
              with:
                repository: galiacheng/arm-oraclelinux-wls-aks
                path: arm-oraclelinux-wls-aks
            - name: Build and test arm-oraclelinux-wls-aks
              run: mvn -Pbicep -Ddev -Passembly clean install --file arm-oraclelinux-wls-aks/pom.xml
            - name: Generate artifact file name and path
              id: artifact_file
              run: |
                version=$(awk '/<version>[^<]+<\/version>/{gsub(/<version>|<\/version>/,"",$1);print $1;exit;}' arm-oraclelinux-wls-aks/pom.xml)
                artifactName=wls-on-aks-azure-marketplace-$version-arm-assembly
                unzip arm-oraclelinux-wls-aks/target/$artifactName.zip -d arm-oraclelinux-wls-aks/target/$artifactName
                echo "##[set-output name=artifactName;]${artifactName}"
                echo "##[set-output name=artifactPath;]arm-oraclelinux-wls-aks/target/$artifactName"
            - name: Archive arm-oraclelinux-wls-aks template
              uses: actions/upload-artifact@v1
              if: success()
              with:
                name: ${{steps.artifact_file.outputs.artifactName}}
                path: ${{steps.artifact_file.outputs.artifactPath}}
             
    deploy-wls-on-aks:
        needs: preflight
        runs-on: ubuntu-latest
        steps:
            - name: Checkout galiacheng/arm-oraclelinux-wls-aks
              uses: actions/checkout@v2
              with:
                repository: galiacheng/arm-oraclelinux-wls-aks
                path: arm-oraclelinux-wls-aks
            - name: Get version information from arm-oraclelinux-wls-aks/pom.xml
              id: version
              run: |
                version=$(awk '/<version>[^<]+<\/version>/{gsub(/<version>|<\/version>/,"",$1);print $1;exit;}' arm-oraclelinux-wls-aks/pom.xml)
                echo "version=${version}" >> $GITHUB_ENV
            - name: Output artifact name for Download action
              id: artifact_file
              run: |
                artifactName=wls-on-aks-azure-marketplace-$version-arm-assembly
                echo "artifactName=${artifactName}" >> $GITHUB_ENV
                echo "##[set-output name=artifactName;]${artifactName}"
            - name: Download artifact for deployment
              uses: actions/download-artifact@v1
              with:
                name: ${{steps.artifact_file.outputs.artifactName}}
            - uses: azure/login@v1
              id: azure-login
              with:
                creds: ${{ env.azureCredentials }}
            - name: Query web app blob url and set to env
              uses: azure/CLI@v1
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    cargoTrackerBlobUrl=$(az storage blob url --account-name ${{ github.event.inputs.storageAccountName }} --container-name ${{ github.event.inputs.storageContainerName }} --name cargo-tracker.war -o tsv)
                    polishedUrl=$(echo ${cargoTrackerBlobUrl} | sed 's,/,\\\/,g')
                    echo "cargoTrackerBlobUrl=${polishedUrl}" >> $GITHUB_ENV
            - name: Create Resource Group
              uses: azure/CLI@v1
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    echo "create resource group" ${{ env.resourceGroupForWlsAks }}
                    az group create --verbose --name ${{ env.resourceGroupForWlsAks }} --location ${{ env.location }}
            - name: Checkout cargotracker
              uses: actions/checkout@v2
              with:
                path: cargotracker
            - name: Prepare parameter file
              run: |
                echo "replace placeholders using real parameter"
                sed -i "s/#location#/${location}/g; \
                        s/#wlsUserName#/${wlsUserName}/g; \
                        s/#wlsPassword#/${wlsPassword}/g; \
                        s/#userAssignedManagedIdentity#/${userAssignedManagedIdentity}/g; \
                        s/#ocrSSOPSW#/${ocrSSOPSW}/g; \
                        s/#ocrSSOUser#/${ocrSSOUser}/g; \
                        s/#appPackageUrls#/${cargoTrackerBlobUrl}/g; \
                        s/#servicePrincipal#/${servicePrincipal}/g; \
                        s/#wdtRuntimePassword#/${wdtRuntimePassword}/g; \
                        s/#testbranchName#/${aksRepoBranchName}/g; \
                        s/#gitUserName#/${aksRepoUserName}/g" \
                        cargotracker/src/test/aks/parameters.json
            - name: Deploy WebLogic Server Cluster Domain offer
              id: deploy-wls-cluster
              uses: azure/CLI@v1
              with:
                azcliversion: ${{ env.azCliVersion }}
                inlineScript: |
                    az deployment group create \
                    --verbose \
                    --resource-group ${{ env.resourceGroupForWlsAks }} \
                    --name wls-on-aks \
                    --parameters @cargotracker/src/test/aks/parameters.json \
                    --template-file ${artifactName}/mainTemplate.json
            - name: Prepare configmap source file
              run: |
                echo "replace placeholders using real parameter"
                sed -i "s/#dbUrl#/'jdbc:postgresql:\/\/${dbName}.postgres.database.azure.com:5432\/postgres'/g; \
                        s/#dbPassword#/'${dbPassword}'/g; \
                        s/#dbUser#/'${dbAdminUser}@${dbName}'/g" \
                        cargotracker/src/test/aks/cargo-tracker-db-jms.yaml
            - name: Install kubectl
              run: |
                curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
                sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
                kubectl version --client
            - name: Connect to AKS cluster
              run: |
                echo "connect to cluster"
                aksClusterName=$(az resource list --resource-group ${{ env.resourceGroupForWlsAks }} --query "[?type=='Microsoft.ContainerService/managedClusters'].name|[0]" -o tsv)
                az aks get-credentials --resource-group ${{ env.resourceGroupForWlsAks }} --name $aksClusterName
            - name: Generate&Apply configmap
              run: |
                echo "create configmap"
                DB_CONFIGMAP_NAME=${{ env.aksClusterConfigMapName }}
                kubectl -n sample-domain1-ns create configmap ${DB_CONFIGMAP_NAME} \
                --from-file=cargotracker/src/test/aks/cargo-tracker-db-jms.yaml
                kubectl -n sample-domain1-ns label configmap ${DB_CONFIGMAP_NAME} \
                weblogic.domainUID=sample-domain1

                restartVersion=$(kubectl -n sample-domain1-ns get domain sample-domain1 '-o=jsonpath={.spec.restartVersion}')
                # increase restart version
                restartVersion=$((restartVersion + 1))
                echo "append configmap and update restart version"
                kubectl -n sample-domain1-ns patch domain sample-domain1 \
                    --type=json \
                    '-p=[{"op": "replace", "path": "/spec/restartVersion", "value": "'${restartVersion}'" }, {"op": "add", "path": "/spec/configuration/model/configMap", "value": "'${DB_CONFIGMAP_NAME}'" }]'
