<?xml version="1.0" encoding="UTF-8"?>
<web-app version="6.0"
		 xmlns="https://jakarta.ee/xml/ns/jakartaee"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd">

	<!-- Overriding system level defaults is a decent usage of XML. -->
	<context-param>
		<param-name>jakarta.faces.PROJECT_STAGE</param-name>
		<param-value>Development</param-value>
	</context-param>
	<context-param>
		<param-name>jakarta.faces.CLIENT_WINDOW_MODE</param-name>
		<param-value>url</param-value>
	</context-param>
	<context-param>
		<param-name>primefaces.THEME</param-name>
		<param-value>omega</param-value>
	</context-param>
	<context-param>
		<param-name>primefaces.FONT_AWESOME</param-name>
		<param-value>true</param-value>
	</context-param>
	<context-param>
		<param-name>primefaces.MOVE_SCRIPTS_TO_BOTTOM</param-name>
		<param-value>true</param-value>
	</context-param>

	<mime-mapping>
		<extension>ttf</extension>
		<mime-type>application/font-sfnt</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>woff</extension>
		<mime-type>application/font-woff</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>woff2</extension>
		<mime-type>application/font-woff2</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>eot</extension>
		<mime-type>application/vnd.ms-fontobject</mime-type>
	</mime-mapping>

	<servlet>
		<servlet-name>Faces Servlet</servlet-name>
		<servlet-class>jakarta.faces.webapp.FacesServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>Faces Servlet</servlet-name>
		<url-pattern>*.xhtml</url-pattern>
	</servlet-mapping>

	<welcome-file-list>
		<welcome-file>index.xhtml</welcome-file>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>

	<!-- Application resource dependencies like JMS queues and data sources 
		are still good candidates for XML, as is application configuration. -->
	<env-entry>
		<env-entry-name>java:app/configuration/GraphTraversalUrl
		</env-entry-name>
		<env-entry-type>java.lang.String</env-entry-type>
		<env-entry-value>${webapp.graphTraversalUrl}</env-entry-value>
	</env-entry>

	<!-- Defining these at the application server level instead of here can 
		be more operations friendly and help make deployment even faster. -->
	<data-source>
		<name>java:app/jdbc/CargoTrackerDatabase</name>
		<class-name>${db.driverClass}</class-name>
		<url>${db.jdbcUrl}</url>
		<user>${db.user}</user>
		<password>${db.password}</password>
		<max-pool-size>32</max-pool-size>
		<min-pool-size>2</min-pool-size>
	</data-source>
	<jms-destination>
		<name>java:app/jms/CargoHandledQueue</name>
		<interface-name>jakarta.jms.Queue</interface-name>
		<destination-name>CargoHandledQueue</destination-name>
	</jms-destination>
	<jms-destination>
		<name>java:app/jms/MisdirectedCargoQueue</name>
		<interface-name>jakarta.jms.Queue</interface-name>
		<destination-name>MisdirectedCargoQueue</destination-name>
	</jms-destination>
	<jms-destination>
		<name>java:app/jms/DeliveredCargoQueue</name>
		<interface-name>jakarta.jms.Queue</interface-name>
		<destination-name>DeliveredCargoQueue</destination-name>
	</jms-destination>
	<jms-destination>
		<name>java:app/jms/RejectedRegistrationAttemptsQueue</name>
		<interface-name>jakarta.jms.Queue</interface-name>
		<destination-name>RejectedRegistrationAttemptsQueue</destination-name>
	</jms-destination>
	<jms-destination>
		<name>java:app/jms/HandlingEventRegistrationAttemptQueue</name>
		<interface-name>jakarta.jms.Queue</interface-name>
		<destination-name>HandlingEventRegistrationAttemptQueue
		</destination-name>
	</jms-destination>
</web-app>